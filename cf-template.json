{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "AmiId": {
      "Description": "The AMI ID from which the HTTP server will be started",
      "Type": "String"
    },
    "SshKeyName": {
      "Description": "Name of an existing EC2 KeyPair for SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair"
    },
    "SshCidr": {
      "Description": "The IP address range that can be used to SSH to the EC2 instance",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x"
    },
    "DockerImage": {
      "Description": "The Docker image to deploy from Docker Hub. It should be public",
      "Type": "String",
      "Default": "zhvih1984/cb"
    },
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-vpc" ] ]
            }
          }
        ]
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "MapPublicIpOnLaunch": "true",
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-subnet" ] ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-internet-gateway" ] ]
            }
          }
        ]
      }
    },
    "Vpc2InternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-route-table" ] ]
            }
          }
        ]
      }
    },
    "Subnet2RouteTable": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },
    "InternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "HTTP server security group (HTTP + SSH)",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "SshCidr"} }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-security-group" ] ]
            }
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": "t2.small",
        "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
        "KeyName": { "Ref": "SshKeyName" },
        "InstanceMonitoring": "false",
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": { "Fn::Join": ["", [
            "#cloud-config\n",
            "coreos:\n",
            "  update:\n",
            "    reboot-strategy: off\n",
            "  units:\n",
            "    - name: 'http-server.service'\n",
            "      command: 'start'\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=HTTP Server\n",
            "        After=docker.service\n",
            "        \n",
            "        [Service]\n",
            "        Restart=always\n",
            "        ExecStartPre=/bin/bash -c '/usr/bin/docker inspect http-server || /usr/bin/docker create -p 80:8080 -e \"USER_ID=$(id -u core)\" -e \"GROUP_ID=$(getent group core | cut -d : -f 3)\" -v /home/core/.ssh:/opt/ssh --name http-server ", { "Ref": "DockerImage" }, "'\n",
            "        ExecStart=/usr/bin/docker start -a http-server\n",
            "        ExecStop=/usr/bin/docker stop -t 2 http-server\n",
            "    - name: 'http-server-cfn-signal.service'\n",
            "      command: 'start'\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=CloudFormation HTTP Server Works Signal\n",
            "        Wants=http-server.service\n",
            "        After=http-server.service\n",
            "        \n",
            "        [Service]\n",
            "        EnvironmentFile=/etc/environment\n",
            "        Type=oneshot\n",
            "        ExecStart=/bin/bash -c '\\\n",
            "          SUCCESS=false; \\\n",
            "          for i in {1..20}; do \\\n",
            "            HTTP_RESULT=\"$(curl -s -w \"%{http_code}\" --connect-timeout 2 --max-time 5 http://${COREOS_PUBLIC_IPV4} -o /dev/null)\"; \\\n",
            "            if [ \"$HTTP_RESULT\" == \"200\" ]; then \\\n",
            "              SUCCESS=true; \\\n",
            "              echo \"Success, HTTP service returned 200\"; \\\n",
            "              break; \\\n",
            "            else \\\n",
            "              echo \"HTTP service still not up, sleeping ...\"; \\\n",
            "              sleep 5; \\\n",
            "            fi; \\\n",
            "          done; \\\n",
            "          docker run --rm crewjam/awscli /bin/ash -c \"/usr/bin/cfn-signal --success $SUCCESS \\\n",
            "            --stack ", { "Ref": "AWS::StackName" }, " \\\n",
            "            --resource HttpServerScalingGroup \\\n",
            "            --region ", { "Ref": "AWS::Region" }, "\"; \\\n",
            "          true'\n"
          ]]}
        }
      }
    },
    "HttpServerScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [ { "Ref": "Subnet" } ],
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "LoadBalancerNames": [ { "Ref": "ElasticLoadBalancer" } ],
        "MinSize": "1",
        "MaxSize": "5",
        "DesiredCapacity": "1",
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "ELB",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-http-server" ] ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": "1"
        }
      }
    },
    "HttpServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "HttpServerScalingGroup" },
        "PolicyType": "StepScaling",
        "EstimatedInstanceWarmup": "120",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": "0",
            "ScalingAdjustment": "1"
          }
        ]
      }
    },
    "HttpServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "HttpServerScalingGroup" },
        "PolicyType": "StepScaling",
        "EstimatedInstanceWarmup": "120",
        "StepAdjustments": [
          {
            "MetricIntervalUpperBound": "0",
            "ScalingAdjustment": "-1"
          }
        ]
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [ { "Ref": "Subnet" } ],
        "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
        "CrossZone": "true",
        "Listeners": [{
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "10",
          "Timeout": "5"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-elb" ] ]
            }
          }
        ]
      }
    },
    "RequestsHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Used for auto-scaling the HTTP servers up",
        "Namespace": "AWS/ELB",
        "AlarmActions": [ { "Ref": "HttpServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ElasticLoadBalancer" }
          }
        ],
        "MetricName": "RequestCount",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Threshold": "40",
        "Statistic": "Sum",
        "EvaluationPeriods": "1",
        "Period": "60"
      }
    },
    "RequestsLowAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Used for auto-scaling the HTTP servers down",
        "Namespace": "AWS/ELB",
        "AlarmActions": [ { "Ref": "HttpServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ElasticLoadBalancer" }
          }
        ],
        "MetricName": "RequestCount",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": "20",
        "Statistic": "Sum",
        "EvaluationPeriods": "1",
        "Period": "60"
      }
    }
  },
  "Outputs": {
    "URL": {
      "Description": "The URL of the HTTP service",
      "Value":  { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ] } ] ] }
    }
  }
}
